
GLCD_real.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002454  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08002600  08002600  00012600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028f4  080028f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080028f8  080028f8  000128f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080028fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000470  20000010  0800290c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  0800290c  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b252  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a76  00000000  00000000  0002b292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be0  00000000  00000000  0002cd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  0002d8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028e2c  00000000  00000000  0002e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce2d  00000000  00000000  00057234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fce6b  00000000  00000000  00064061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160ecc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030dc  00000000  00000000  00160f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080025e8 	.word	0x080025e8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	080025e8 	.word	0x080025e8

080001ec <SendByteSPI>:
// A replacement for SPI_TRANSMIT



void SendByteSPI(uint8_t byte)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b084      	sub	sp, #16
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	4603      	mov	r3, r0
 80001f4:	71fb      	strb	r3, [r7, #7]
	for(int i=0;i<8;i++)
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e01f      	b.n	800023c <SendByteSPI+0x50>
	{
		if((byte<<i)&0x80)
 80001fc:	79fa      	ldrb	r2, [r7, #7]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	fa02 f303 	lsl.w	r3, r2, r3
 8000204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000208:	2b00      	cmp	r3, #0
 800020a:	d005      	beq.n	8000218 <SendByteSPI+0x2c>
			{
				HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_SET);  // SID=1  OR MOSI
 800020c:	2201      	movs	r2, #1
 800020e:	2108      	movs	r1, #8
 8000210:	480e      	ldr	r0, [pc, #56]	; (800024c <SendByteSPI+0x60>)
 8000212:	f000 fff5 	bl	8001200 <HAL_GPIO_WritePin>
 8000216:	e004      	b.n	8000222 <SendByteSPI+0x36>
			}

		else HAL_GPIO_WritePin(SID_PORT, SID_PIN, GPIO_PIN_RESET);  // SID=0
 8000218:	2200      	movs	r2, #0
 800021a:	2108      	movs	r1, #8
 800021c:	480b      	ldr	r0, [pc, #44]	; (800024c <SendByteSPI+0x60>)
 800021e:	f000 ffef 	bl	8001200 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_RESET);  // SCLK =0  OR SCK
 8000222:	2200      	movs	r2, #0
 8000224:	2104      	movs	r1, #4
 8000226:	480a      	ldr	r0, [pc, #40]	; (8000250 <SendByteSPI+0x64>)
 8000228:	f000 ffea 	bl	8001200 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(SCLK_PORT, SCLK_PIN, GPIO_PIN_SET);  // SCLK=1
 800022c:	2201      	movs	r2, #1
 800022e:	2104      	movs	r1, #4
 8000230:	4807      	ldr	r0, [pc, #28]	; (8000250 <SendByteSPI+0x64>)
 8000232:	f000 ffe5 	bl	8001200 <HAL_GPIO_WritePin>
	for(int i=0;i<8;i++)
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	3301      	adds	r3, #1
 800023a:	60fb      	str	r3, [r7, #12]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	2b07      	cmp	r3, #7
 8000240:	dddc      	ble.n	80001fc <SendByteSPI+0x10>

	}
}
 8000242:	bf00      	nop
 8000244:	bf00      	nop
 8000246:	3710      	adds	r7, #16
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	48000c00 	.word	0x48000c00
 8000250:	48000800 	.word	0x48000800

08000254 <ST7920_SendCmd>:




void ST7920_SendCmd (uint8_t cmd)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	4603      	mov	r3, r0
 800025c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 800025e:	2201      	movs	r2, #1
 8000260:	2108      	movs	r1, #8
 8000262:	480f      	ldr	r0, [pc, #60]	; (80002a0 <ST7920_SendCmd+0x4c>)
 8000264:	f000 ffcc 	bl	8001200 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(0<<1));  // send the SYNC + RS(0)
 8000268:	20f8      	movs	r0, #248	; 0xf8
 800026a:	f7ff ffbf 	bl	80001ec <SendByteSPI>
	SendByteSPI(cmd&0xf0);  // send the higher nibble first
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	f023 030f 	bic.w	r3, r3, #15
 8000274:	b2db      	uxtb	r3, r3
 8000276:	4618      	mov	r0, r3
 8000278:	f7ff ffb8 	bl	80001ec <SendByteSPI>
	SendByteSPI((cmd<<4)&0xf0);  // send the lower nibble
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	011b      	lsls	r3, r3, #4
 8000280:	b2db      	uxtb	r3, r3
 8000282:	4618      	mov	r0, r3
 8000284:	f7ff ffb2 	bl	80001ec <SendByteSPI>
	delay_us(50);
 8000288:	2032      	movs	r0, #50	; 0x32
 800028a:	f000 fa51 	bl	8000730 <delay_us>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 800028e:	2200      	movs	r2, #0
 8000290:	2108      	movs	r1, #8
 8000292:	4803      	ldr	r0, [pc, #12]	; (80002a0 <ST7920_SendCmd+0x4c>)
 8000294:	f000 ffb4 	bl	8001200 <HAL_GPIO_WritePin>

}
 8000298:	bf00      	nop
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}
 80002a0:	48002000 	.word	0x48002000

080002a4 <ST7920_SendData>:

void ST7920_SendData (uint8_t data)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b082      	sub	sp, #8
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);  // PUll the CS high
 80002ae:	2201      	movs	r2, #1
 80002b0:	2108      	movs	r1, #8
 80002b2:	480f      	ldr	r0, [pc, #60]	; (80002f0 <ST7920_SendData+0x4c>)
 80002b4:	f000 ffa4 	bl	8001200 <HAL_GPIO_WritePin>

	SendByteSPI(0xf8+(1<<1));  // send the SYNC + RS(1)
 80002b8:	20fa      	movs	r0, #250	; 0xfa
 80002ba:	f7ff ff97 	bl	80001ec <SendByteSPI>
	SendByteSPI(data&0xf0);  // send the higher nibble first
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	f023 030f 	bic.w	r3, r3, #15
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff90 	bl	80001ec <SendByteSPI>
	SendByteSPI((data<<4)&0xf0);  // send the lower nibble
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	011b      	lsls	r3, r3, #4
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	4618      	mov	r0, r3
 80002d4:	f7ff ff8a 	bl	80001ec <SendByteSPI>
	delay_us(1);
 80002d8:	2001      	movs	r0, #1
 80002da:	f000 fa29 	bl	8000730 <delay_us>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);  // PUll the CS LOW
 80002de:	2200      	movs	r2, #0
 80002e0:	2108      	movs	r1, #8
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <ST7920_SendData+0x4c>)
 80002e4:	f000 ff8c 	bl	8001200 <HAL_GPIO_WritePin>
}
 80002e8:	bf00      	nop
 80002ea:	3708      	adds	r7, #8
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bd80      	pop	{r7, pc}
 80002f0:	48002000 	.word	0x48002000

080002f4 <ST7920_GraphicMode>:


// switch to graphic mode or normal mode::: enable = 1 -> graphic mode enable = 0 -> normal mode

void ST7920_GraphicMode (int enable)   // 1-enable, 0-disable
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
	if (enable == 1)
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d115      	bne.n	800032e <ST7920_GraphicMode+0x3a>
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
 8000302:	2030      	movs	r0, #48	; 0x30
 8000304:	f7ff ffa6 	bl	8000254 <ST7920_SendCmd>
		HAL_Delay (1);
 8000308:	2001      	movs	r0, #1
 800030a:	f000 fcdd 	bl	8000cc8 <HAL_Delay>
		ST7920_SendCmd(0x34);  // switch to Extended instructions
 800030e:	2034      	movs	r0, #52	; 0x34
 8000310:	f7ff ffa0 	bl	8000254 <ST7920_SendCmd>
		HAL_Delay (1);
 8000314:	2001      	movs	r0, #1
 8000316:	f000 fcd7 	bl	8000cc8 <HAL_Delay>
		ST7920_SendCmd(0x36);  // enable graphics
 800031a:	2036      	movs	r0, #54	; 0x36
 800031c:	f7ff ff9a 	bl	8000254 <ST7920_SendCmd>
		HAL_Delay (1);
 8000320:	2001      	movs	r0, #1
 8000322:	f000 fcd1 	bl	8000cc8 <HAL_Delay>
		Graphic_Check = 1;  // update the variable
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <ST7920_GraphicMode+0x5c>)
 8000328:	2201      	movs	r2, #1
 800032a:	701a      	strb	r2, [r3, #0]
	{
		ST7920_SendCmd(0x30);  // 8 bit mode
		HAL_Delay (1);
		Graphic_Check = 0;  // update the variable
	}
}
 800032c:	e00b      	b.n	8000346 <ST7920_GraphicMode+0x52>
	else if (enable == 0)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d108      	bne.n	8000346 <ST7920_GraphicMode+0x52>
		ST7920_SendCmd(0x30);  // 8 bit mode
 8000334:	2030      	movs	r0, #48	; 0x30
 8000336:	f7ff ff8d 	bl	8000254 <ST7920_SendCmd>
		HAL_Delay (1);
 800033a:	2001      	movs	r0, #1
 800033c:	f000 fcc4 	bl	8000cc8 <HAL_Delay>
		Graphic_Check = 0;  // update the variable
 8000340:	4b03      	ldr	r3, [pc, #12]	; (8000350 <ST7920_GraphicMode+0x5c>)
 8000342:	2200      	movs	r2, #0
 8000344:	701a      	strb	r2, [r3, #0]
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	2000002c 	.word	0x2000002c

08000354 <ST7920_DrawBitmap>:

void ST7920_DrawBitmap(const unsigned char* graphic)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	uint8_t x, y;
	for(y = 0; y < 64; y++)
 800035c:	2300      	movs	r3, #0
 800035e:	73bb      	strb	r3, [r7, #14]
 8000360:	e06a      	b.n	8000438 <ST7920_DrawBitmap+0xe4>
	{
		if(y < 32)
 8000362:	7bbb      	ldrb	r3, [r7, #14]
 8000364:	2b1f      	cmp	r3, #31
 8000366:	d830      	bhi.n	80003ca <ST7920_DrawBitmap+0x76>
		{
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 8000368:	2300      	movs	r3, #0
 800036a:	73fb      	strb	r3, [r7, #15]
 800036c:	e029      	b.n	80003c2 <ST7920_DrawBitmap+0x6e>
			{												// In extended instruction mode, vertical and horizontal coordinates must be specified before sending data in.
				ST7920_SendCmd(0x80 | y);				// Vertical coordinate of the screen is specified first. (0-31)
 800036e:	7bbb      	ldrb	r3, [r7, #14]
 8000370:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff6c 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendCmd(0x80 | x);				// Then horizontal coordinate of the screen is specified. (0-8)
 800037c:	7bfb      	ldrb	r3, [r7, #15]
 800037e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff65 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);		// Data to the upper byte is sent to the coordinate.
 800038a:	7bfa      	ldrb	r2, [r7, #15]
 800038c:	7bbb      	ldrb	r3, [r7, #14]
 800038e:	00db      	lsls	r3, r3, #3
 8000390:	4413      	add	r3, r2
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	461a      	mov	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4413      	add	r3, r2
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff81 	bl	80002a4 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);	// Data to the lower byte is sent to the coordinate.
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	011b      	lsls	r3, r3, #4
 80003ac:	4413      	add	r3, r2
 80003ae:	461a      	mov	r2, r3
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	4413      	add	r3, r2
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	4618      	mov	r0, r3
 80003b8:	f7ff ff74 	bl	80002a4 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws top half of the screen.
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b07      	cmp	r3, #7
 80003c6:	d9d2      	bls.n	800036e <ST7920_DrawBitmap+0x1a>
 80003c8:	e033      	b.n	8000432 <ST7920_DrawBitmap+0xde>
			}
		}
		else
		{
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 80003ca:	2300      	movs	r3, #0
 80003cc:	73fb      	strb	r3, [r7, #15]
 80003ce:	e02d      	b.n	800042c <ST7920_DrawBitmap+0xd8>
			{												// Actions performed as same as the upper half screen.
				ST7920_SendCmd(0x80 | (y-32));			// Vertical coordinate must be scaled back to 0-31 as it is dealing with another half of the screen.
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3b20      	subs	r3, #32
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	b25b      	sxtb	r3, r3
 80003d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003dc:	b25b      	sxtb	r3, r3
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff37 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendCmd(0x88 | x);
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	f063 0377 	orn	r3, r3, #119	; 0x77
 80003ec:	b2db      	uxtb	r3, r3
 80003ee:	4618      	mov	r0, r3
 80003f0:	f7ff ff30 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendData(graphic[2*x + 16*y]);
 80003f4:	7bfa      	ldrb	r2, [r7, #15]
 80003f6:	7bbb      	ldrb	r3, [r7, #14]
 80003f8:	00db      	lsls	r3, r3, #3
 80003fa:	4413      	add	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	461a      	mov	r2, r3
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff4c 	bl	80002a4 <ST7920_SendData>
				ST7920_SendData(graphic[2*x+1 + 16*y]);
 800040c:	7bfb      	ldrb	r3, [r7, #15]
 800040e:	005b      	lsls	r3, r3, #1
 8000410:	1c5a      	adds	r2, r3, #1
 8000412:	7bbb      	ldrb	r3, [r7, #14]
 8000414:	011b      	lsls	r3, r3, #4
 8000416:	4413      	add	r3, r2
 8000418:	461a      	mov	r2, r3
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4618      	mov	r0, r3
 8000422:	f7ff ff3f 	bl	80002a4 <ST7920_SendData>
			for(x = 0; x < 8; x++)							// Draws bottom half of the screen.
 8000426:	7bfb      	ldrb	r3, [r7, #15]
 8000428:	3301      	adds	r3, #1
 800042a:	73fb      	strb	r3, [r7, #15]
 800042c:	7bfb      	ldrb	r3, [r7, #15]
 800042e:	2b07      	cmp	r3, #7
 8000430:	d9ce      	bls.n	80003d0 <ST7920_DrawBitmap+0x7c>
	for(y = 0; y < 64; y++)
 8000432:	7bbb      	ldrb	r3, [r7, #14]
 8000434:	3301      	adds	r3, #1
 8000436:	73bb      	strb	r3, [r7, #14]
 8000438:	7bbb      	ldrb	r3, [r7, #14]
 800043a:	2b3f      	cmp	r3, #63	; 0x3f
 800043c:	d991      	bls.n	8000362 <ST7920_DrawBitmap+0xe>
			}
		}

	}
}
 800043e:	bf00      	nop
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <ST7920_Update>:


// Update the display with the selected graphics
void ST7920_Update(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	af00      	add	r7, sp, #0
	ST7920_DrawBitmap(image);
 800044c:	4802      	ldr	r0, [pc, #8]	; (8000458 <ST7920_Update+0x10>)
 800044e:	f7ff ff81 	bl	8000354 <ST7920_DrawBitmap>
}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	20000030 	.word	0x20000030

0800045c <ST7920_Clear>:



void ST7920_Clear()
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
	if (Graphic_Check == 1)  // if the graphic mode is set
 8000462:	4b21      	ldr	r3, [pc, #132]	; (80004e8 <ST7920_Clear+0x8c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d134      	bne.n	80004d4 <ST7920_Clear+0x78>
	{
		uint8_t x, y;
		for(y = 0; y < 64; y++)
 800046a:	2300      	movs	r3, #0
 800046c:	71bb      	strb	r3, [r7, #6]
 800046e:	e02d      	b.n	80004cc <ST7920_Clear+0x70>
		{
			if(y < 32)
 8000470:	79bb      	ldrb	r3, [r7, #6]
 8000472:	2b1f      	cmp	r3, #31
 8000474:	d80a      	bhi.n	800048c <ST7920_Clear+0x30>
			{
				ST7920_SendCmd(0x80 | y);
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f7ff fee8 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendCmd(0x80);
 8000484:	2080      	movs	r0, #128	; 0x80
 8000486:	f7ff fee5 	bl	8000254 <ST7920_SendCmd>
 800048a:	e00d      	b.n	80004a8 <ST7920_Clear+0x4c>
			}
			else
			{
				ST7920_SendCmd(0x80 | (y-32));
 800048c:	79bb      	ldrb	r3, [r7, #6]
 800048e:	3b20      	subs	r3, #32
 8000490:	b2db      	uxtb	r3, r3
 8000492:	b25b      	sxtb	r3, r3
 8000494:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000498:	b25b      	sxtb	r3, r3
 800049a:	b2db      	uxtb	r3, r3
 800049c:	4618      	mov	r0, r3
 800049e:	f7ff fed9 	bl	8000254 <ST7920_SendCmd>
				ST7920_SendCmd(0x88);
 80004a2:	2088      	movs	r0, #136	; 0x88
 80004a4:	f7ff fed6 	bl	8000254 <ST7920_SendCmd>
			}
			for(x = 0; x < 8; x++)
 80004a8:	2300      	movs	r3, #0
 80004aa:	71fb      	strb	r3, [r7, #7]
 80004ac:	e008      	b.n	80004c0 <ST7920_Clear+0x64>
			{
				ST7920_SendData(0);
 80004ae:	2000      	movs	r0, #0
 80004b0:	f7ff fef8 	bl	80002a4 <ST7920_SendData>
				ST7920_SendData(0);
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff fef5 	bl	80002a4 <ST7920_SendData>
			for(x = 0; x < 8; x++)
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	3301      	adds	r3, #1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b07      	cmp	r3, #7
 80004c4:	d9f3      	bls.n	80004ae <ST7920_Clear+0x52>
		for(y = 0; y < 64; y++)
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	3301      	adds	r3, #1
 80004ca:	71bb      	strb	r3, [r7, #6]
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	2b3f      	cmp	r3, #63	; 0x3f
 80004d0:	d9ce      	bls.n	8000470 <ST7920_Clear+0x14>
	else
	{
		ST7920_SendCmd(0x01);   // clear the display using command
		HAL_Delay(2); // delay >1.6 ms
	}
}
 80004d2:	e005      	b.n	80004e0 <ST7920_Clear+0x84>
		ST7920_SendCmd(0x01);   // clear the display using command
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff febd 	bl	8000254 <ST7920_SendCmd>
		HAL_Delay(2); // delay >1.6 ms
 80004da:	2002      	movs	r0, #2
 80004dc:	f000 fbf4 	bl	8000cc8 <HAL_Delay>
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	2000002c 	.word	0x2000002c

080004ec <ST7920_Init>:


void ST7920_Init (void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);  // RESET=0
 80004f0:	2200      	movs	r2, #0
 80004f2:	2180      	movs	r1, #128	; 0x80
 80004f4:	481c      	ldr	r0, [pc, #112]	; (8000568 <ST7920_Init+0x7c>)
 80004f6:	f000 fe83 	bl	8001200 <HAL_GPIO_WritePin>
	HAL_Delay(10);   // wait for 10ms
 80004fa:	200a      	movs	r0, #10
 80004fc:	f000 fbe4 	bl	8000cc8 <HAL_Delay>
	HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);  // RESET=1
 8000500:	2201      	movs	r2, #1
 8000502:	2180      	movs	r1, #128	; 0x80
 8000504:	4818      	ldr	r0, [pc, #96]	; (8000568 <ST7920_Init+0x7c>)
 8000506:	f000 fe7b 	bl	8001200 <HAL_GPIO_WritePin>

	HAL_Delay(50);   //wait for >40 ms
 800050a:	2032      	movs	r0, #50	; 0x32
 800050c:	f000 fbdc 	bl	8000cc8 <HAL_Delay>


	ST7920_SendCmd(0x30);  // 8bit mode
 8000510:	2030      	movs	r0, #48	; 0x30
 8000512:	f7ff fe9f 	bl	8000254 <ST7920_SendCmd>
	delay_us(110);  //  >100us delay
 8000516:	206e      	movs	r0, #110	; 0x6e
 8000518:	f000 f90a 	bl	8000730 <delay_us>
	//HAL_Delay(110);
	ST7920_SendCmd(0x30);  // 8bit mode
 800051c:	2030      	movs	r0, #48	; 0x30
 800051e:	f7ff fe99 	bl	8000254 <ST7920_SendCmd>
	delay_us(40);  // >37us delay
 8000522:	2028      	movs	r0, #40	; 0x28
 8000524:	f000 f904 	bl	8000730 <delay_us>
	//HAL_Delay(40);
	ST7920_SendCmd(0x08);  // D=0, C=0, B=0
 8000528:	2008      	movs	r0, #8
 800052a:	f7ff fe93 	bl	8000254 <ST7920_SendCmd>
	delay_us(110);  // >100us delay
 800052e:	206e      	movs	r0, #110	; 0x6e
 8000530:	f000 f8fe 	bl	8000730 <delay_us>
	//HAL_Delay(110);
	ST7920_SendCmd(0x01);  // clear screen
 8000534:	2001      	movs	r0, #1
 8000536:	f7ff fe8d 	bl	8000254 <ST7920_SendCmd>
	HAL_Delay(12);  // >10 ms delay
 800053a:	200c      	movs	r0, #12
 800053c:	f000 fbc4 	bl	8000cc8 <HAL_Delay>


	ST7920_SendCmd(0x06);  // cursor increment right no shift
 8000540:	2006      	movs	r0, #6
 8000542:	f7ff fe87 	bl	8000254 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 8000546:	2001      	movs	r0, #1
 8000548:	f000 fbbe 	bl	8000cc8 <HAL_Delay>

	ST7920_SendCmd(0x0C);  // D=1, C=0, B=0
 800054c:	200c      	movs	r0, #12
 800054e:	f7ff fe81 	bl	8000254 <ST7920_SendCmd>
    HAL_Delay(1);  // 1ms delay
 8000552:	2001      	movs	r0, #1
 8000554:	f000 fbb8 	bl	8000cc8 <HAL_Delay>

	ST7920_SendCmd(0x02);  // return to home
 8000558:	2002      	movs	r0, #2
 800055a:	f7ff fe7b 	bl	8000254 <ST7920_SendCmd>
	HAL_Delay(1);  // 1ms delay
 800055e:	2001      	movs	r0, #1
 8000560:	f000 fbb2 	bl	8000cc8 <HAL_Delay>

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	48000400 	.word	0x48000400

0800056c <SetPixel>:


// set Pixel

void SetPixel(uint8_t x, uint8_t y)
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	460a      	mov	r2, r1
 8000576:	71fb      	strb	r3, [r7, #7]
 8000578:	4613      	mov	r3, r2
 800057a:	71bb      	strb	r3, [r7, #6]
  if (y < numRows && x < numCols)
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <SetPixel+0x68>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	79ba      	ldrb	r2, [r7, #6]
 8000582:	429a      	cmp	r2, r3
 8000584:	d220      	bcs.n	80005c8 <SetPixel+0x5c>
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <SetPixel+0x6c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	79fa      	ldrb	r2, [r7, #7]
 800058c:	429a      	cmp	r2, r3
 800058e:	d21b      	bcs.n	80005c8 <SetPixel+0x5c>
  {
    uint8_t *p = image + ((y * (numCols/8)) + (x/8));
 8000590:	79bb      	ldrb	r3, [r7, #6]
 8000592:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <SetPixel+0x6c>)
 8000594:	7812      	ldrb	r2, [r2, #0]
 8000596:	08d2      	lsrs	r2, r2, #3
 8000598:	b2d2      	uxtb	r2, r2
 800059a:	fb02 f303 	mul.w	r3, r2, r3
 800059e:	79fa      	ldrb	r2, [r7, #7]
 80005a0:	08d2      	lsrs	r2, r2, #3
 80005a2:	b2d2      	uxtb	r2, r2
 80005a4:	4413      	add	r3, r2
 80005a6:	461a      	mov	r2, r3
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <SetPixel+0x70>)
 80005aa:	4413      	add	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
    *p |= 0x80u >> (x%8);
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	781a      	ldrb	r2, [r3, #0]
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 0307 	and.w	r3, r3, #7
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	fa21 f303 	lsr.w	r3, r1, r3
 80005be:	b2db      	uxtb	r3, r3
 80005c0:	4313      	orrs	r3, r2
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	701a      	strb	r2, [r3, #0]

  }

}
 80005c8:	bf00      	nop
 80005ca:	3714      	adds	r7, #20
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000001 	.word	0x20000001
 80005dc:	20000030 	.word	0x20000030

080005e0 <SendstringGLCD>:
//	}
//}


void SendstringGLCD(uint8_t x, uint8_t y, char* string , tstGlcdDislayFont Font)
{
 80005e0:	b082      	sub	sp, #8
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	603a      	str	r2, [r7, #0]
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	4603      	mov	r3, r0
 80005ee:	71fb      	strb	r3, [r7, #7]
 80005f0:	460b      	mov	r3, r1
 80005f2:	71bb      	strb	r3, [r7, #6]
	uint8_t arr;
	while(* string)
 80005f4:	e085      	b.n	8000702 <SendstringGLCD+0x122>
	{
		if(Font.enPosition == Horizon)
 80005f6:	7f7b      	ldrb	r3, [r7, #29]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d13d      	bne.n	8000678 <SendstringGLCD+0x98>
		{
			for (uint8_t u8IndexY = 0; u8IndexY < Font.u8Height ; u8IndexY++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e02c      	b.n	800065c <SendstringGLCD+0x7c>
			{
				arr =*( Font.pu8Font + u8IndexY + Font.u8Height * (*string - '/'));
 8000602:	6a3a      	ldr	r2, [r7, #32]
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	7ff9      	ldrb	r1, [r7, #31]
 8000608:	4608      	mov	r0, r1
 800060a:	6839      	ldr	r1, [r7, #0]
 800060c:	7809      	ldrb	r1, [r1, #0]
 800060e:	392f      	subs	r1, #47	; 0x2f
 8000610:	fb00 f101 	mul.w	r1, r0, r1
 8000614:	440b      	add	r3, r1
 8000616:	4413      	add	r3, r2
 8000618:	781b      	ldrb	r3, [r3, #0]
 800061a:	72fb      	strb	r3, [r7, #11]
					for (uint8_t u8IndexX = 0; u8IndexX < Font.u8Width; u8IndexX++)
 800061c:	2300      	movs	r3, #0
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	e015      	b.n	800064e <SendstringGLCD+0x6e>
					{
						if (arr & (0x01 << u8IndexX))
 8000622:	7afa      	ldrb	r2, [r7, #11]
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	fa42 f303 	asr.w	r3, r2, r3
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	2b00      	cmp	r3, #0
 8000630:	d00a      	beq.n	8000648 <SendstringGLCD+0x68>
						{
							SetPixel(x + u8IndexX, y + u8IndexY);
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	7bbb      	ldrb	r3, [r7, #14]
 8000636:	4413      	add	r3, r2
 8000638:	b2d8      	uxtb	r0, r3
 800063a:	79ba      	ldrb	r2, [r7, #6]
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	4413      	add	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	f7ff ff92 	bl	800056c <SetPixel>
					for (uint8_t u8IndexX = 0; u8IndexX < Font.u8Width; u8IndexX++)
 8000648:	7bbb      	ldrb	r3, [r7, #14]
 800064a:	3301      	adds	r3, #1
 800064c:	73bb      	strb	r3, [r7, #14]
 800064e:	7fbb      	ldrb	r3, [r7, #30]
 8000650:	7bba      	ldrb	r2, [r7, #14]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3e5      	bcc.n	8000622 <SendstringGLCD+0x42>
			for (uint8_t u8IndexY = 0; u8IndexY < Font.u8Height ; u8IndexY++)
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	3301      	adds	r3, #1
 800065a:	73fb      	strb	r3, [r7, #15]
 800065c:	7ffb      	ldrb	r3, [r7, #31]
 800065e:	7bfa      	ldrb	r2, [r7, #15]
 8000660:	429a      	cmp	r2, r3
 8000662:	d3ce      	bcc.n	8000602 <SendstringGLCD+0x22>
						}
					}
			}
			string++;
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	603b      	str	r3, [r7, #0]
			x= x + Font.u8Width + 1;
 800066a:	7fba      	ldrb	r2, [r7, #30]
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	4413      	add	r3, r2
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3301      	adds	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	e044      	b.n	8000702 <SendstringGLCD+0x122>
		}
		else
		{
			for(uint8_t u8IndexX = 0; u8IndexX < Font.u8Width; u8IndexX++)
 8000678:	2300      	movs	r3, #0
 800067a:	737b      	strb	r3, [r7, #13]
 800067c:	e034      	b.n	80006e8 <SendstringGLCD+0x108>
			{
				arr =*( Font.pu8Font + u8IndexX + Font.u8Width * (*string - 32));
 800067e:	6a3a      	ldr	r2, [r7, #32]
 8000680:	7b7b      	ldrb	r3, [r7, #13]
 8000682:	7fb9      	ldrb	r1, [r7, #30]
 8000684:	4608      	mov	r0, r1
 8000686:	6839      	ldr	r1, [r7, #0]
 8000688:	7809      	ldrb	r1, [r1, #0]
 800068a:	3920      	subs	r1, #32
 800068c:	fb00 f101 	mul.w	r1, r0, r1
 8000690:	440b      	add	r3, r1
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	72fb      	strb	r3, [r7, #11]
				for (uint8_t u8IndexY = 0; u8IndexY < Font.u8Height; u8IndexY++)
 8000698:	2300      	movs	r3, #0
 800069a:	733b      	strb	r3, [r7, #12]
 800069c:	e01d      	b.n	80006da <SendstringGLCD+0xfa>
				{
					if (arr & (1 <<((Font.u8Height-1) - u8IndexY)))
 800069e:	7afa      	ldrb	r2, [r7, #11]
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	1e59      	subs	r1, r3, #1
 80006a4:	7b3b      	ldrb	r3, [r7, #12]
 80006a6:	1acb      	subs	r3, r1, r3
 80006a8:	fa42 f303 	asr.w	r3, r2, r3
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d00f      	beq.n	80006d4 <SendstringGLCD+0xf4>
					{
						SetPixel(x+u8IndexX, y+((Font.u8Height-1)-u8IndexY));
 80006b4:	79fa      	ldrb	r2, [r7, #7]
 80006b6:	7b7b      	ldrb	r3, [r7, #13]
 80006b8:	4413      	add	r3, r2
 80006ba:	b2d8      	uxtb	r0, r3
 80006bc:	7ffa      	ldrb	r2, [r7, #31]
 80006be:	7b3b      	ldrb	r3, [r7, #12]
 80006c0:	1ad3      	subs	r3, r2, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	3b01      	subs	r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	4619      	mov	r1, r3
 80006d0:	f7ff ff4c 	bl	800056c <SetPixel>
				for (uint8_t u8IndexY = 0; u8IndexY < Font.u8Height; u8IndexY++)
 80006d4:	7b3b      	ldrb	r3, [r7, #12]
 80006d6:	3301      	adds	r3, #1
 80006d8:	733b      	strb	r3, [r7, #12]
 80006da:	7ffb      	ldrb	r3, [r7, #31]
 80006dc:	7b3a      	ldrb	r2, [r7, #12]
 80006de:	429a      	cmp	r2, r3
 80006e0:	d3dd      	bcc.n	800069e <SendstringGLCD+0xbe>
			for(uint8_t u8IndexX = 0; u8IndexX < Font.u8Width; u8IndexX++)
 80006e2:	7b7b      	ldrb	r3, [r7, #13]
 80006e4:	3301      	adds	r3, #1
 80006e6:	737b      	strb	r3, [r7, #13]
 80006e8:	7fbb      	ldrb	r3, [r7, #30]
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3c6      	bcc.n	800067e <SendstringGLCD+0x9e>
					}
				}
			}
			string++;
 80006f0:	683b      	ldr	r3, [r7, #0]
 80006f2:	3301      	adds	r3, #1
 80006f4:	603b      	str	r3, [r7, #0]
			x= x + Font.u8Width + 1;
 80006f6:	7fba      	ldrb	r2, [r7, #30]
 80006f8:	79fb      	ldrb	r3, [r7, #7]
 80006fa:	4413      	add	r3, r2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	3301      	adds	r3, #1
 8000700:	71fb      	strb	r3, [r7, #7]
	while(* string)
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	2b00      	cmp	r3, #0
 8000708:	f47f af75 	bne.w	80005f6 <SendstringGLCD+0x16>
		}

	}
}
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	3710      	adds	r7, #16
 8000712:	46bd      	mov	sp, r7
 8000714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000718:	b002      	add	sp, #8
 800071a:	4770      	bx	lr

0800071c <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <delay_init+0x10>)
 8000722:	f001 fc47 	bl	8001fb4 <HAL_TIM_Base_Start>
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000430 	.word	0x20000430

08000730 <delay_us>:

void delay_us (uint16_t delay)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 800073a:	4b09      	ldr	r3, [pc, #36]	; (8000760 <delay_us+0x30>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 8000742:	bf00      	nop
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <delay_us+0x30>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800074a:	88fb      	ldrh	r3, [r7, #6]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3f9      	bcc.n	8000744 <delay_us+0x14>
}
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	20000430 	.word	0x20000430

08000764 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076a:	f000 fa38 	bl	8000bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800076e:	f000 f84b 	bl	8000808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000772:	f000 f8e3 	bl	800093c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000776:	f000 f88d 	bl	8000894 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  delay_init();
 800077a:	f7ff ffcf 	bl	800071c <delay_init>
  ST7920_Clear();
 800077e:	f7ff fe6d 	bl	800045c <ST7920_Clear>
  ST7920_Init();
 8000782:	f7ff feb3 	bl	80004ec <ST7920_Init>
  ST7920_Clear();
 8000786:	f7ff fe69 	bl	800045c <ST7920_Clear>
  ST7920_GraphicMode(1);
 800078a:	2001      	movs	r0, #1
 800078c:	f7ff fdb2 	bl	80002f4 <ST7920_GraphicMode>
  ST7920_Clear();
 8000790:	f7ff fe64 	bl	800045c <ST7920_Clear>
//  Sendstring7_9GLCD(15,25,"78");
//  Sendstring3_5GLCD(0, 0, "12:23");
//  Sendstring3_5GLCD(88, 0, "15/01/1999");
  tstGlcdDislayFont Font35={eSMALL,Horizon,3,5,(uint8_t *)Font3x5};
 8000794:	4a17      	ldr	r2, [pc, #92]	; (80007f4 <main+0x90>)
 8000796:	f107 0310 	add.w	r3, r7, #16
 800079a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800079e:	e883 0003 	stmia.w	r3, {r0, r1}
  tstGlcdDislayFont Font79={eLARGE,Horizon,7,9,(uint8_t *)Font7x9};
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <main+0x94>)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007ac:	e883 0003 	stmia.w	r3, {r0, r1}
  tstGlcdDislayFont Font57={eMEDIUM,Vetical,5,7,(uint8_t *)Font5x7};
 80007b0:	4a12      	ldr	r2, [pc, #72]	; (80007fc <main+0x98>)
 80007b2:	463b      	mov	r3, r7
 80007b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b8:	e883 0003 	stmia.w	r3, {r0, r1}
 SendstringGLCD(35,1,"123456789",Font79);
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	9300      	str	r3, [sp, #0]
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <main+0x9c>)
 80007c4:	2101      	movs	r1, #1
 80007c6:	2023      	movs	r0, #35	; 0x23
 80007c8:	f7ff ff0a 	bl	80005e0 <SendstringGLCD>
 SendstringGLCD(67,56,"123456789",Font57);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	4a0b      	ldr	r2, [pc, #44]	; (8000800 <main+0x9c>)
 80007d4:	2138      	movs	r1, #56	; 0x38
 80007d6:	2043      	movs	r0, #67	; 0x43
 80007d8:	f7ff ff02 	bl	80005e0 <SendstringGLCD>
 SendstringGLCD(0,0,"1234",Font35);
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	4a08      	ldr	r2, [pc, #32]	; (8000804 <main+0xa0>)
 80007e4:	2100      	movs	r1, #0
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fefa 	bl	80005e0 <SendstringGLCD>
 ST7920_Update();
 80007ec:	f7ff fe2c 	bl	8000448 <ST7920_Update>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 80007f0:	e7fe      	b.n	80007f0 <main+0x8c>
 80007f2:	bf00      	nop
 80007f4:	08002614 	.word	0x08002614
 80007f8:	0800261c 	.word	0x0800261c
 80007fc:	08002624 	.word	0x08002624
 8000800:	08002600 	.word	0x08002600
 8000804:	0800260c 	.word	0x0800260c

08000808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b096      	sub	sp, #88	; 0x58
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	2244      	movs	r2, #68	; 0x44
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f001 fede 	bl	80025d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	463b      	mov	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	601a      	str	r2, [r3, #0]
 8000822:	605a      	str	r2, [r3, #4]
 8000824:	609a      	str	r2, [r3, #8]
 8000826:	60da      	str	r2, [r3, #12]
 8000828:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800082a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800082e:	f000 fd0d 	bl	800124c <HAL_PWREx_ControlVoltageScaling>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000838:	f000 f922 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800083c:	2310      	movs	r3, #16
 800083e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000840:	2301      	movs	r3, #1
 8000842:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000848:	2360      	movs	r3, #96	; 0x60
 800084a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	4618      	mov	r0, r3
 8000856:	f000 fd4f 	bl	80012f8 <HAL_RCC_OscConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000860:	f000 f90e 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000864:	230f      	movs	r3, #15
 8000866:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000868:	2300      	movs	r3, #0
 800086a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000878:	463b      	mov	r3, r7
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f001 f955 	bl	8001b2c <HAL_RCC_ClockConfig>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000888:	f000 f8fa 	bl	8000a80 <Error_Handler>
  }
}
 800088c:	bf00      	nop
 800088e:	3758      	adds	r7, #88	; 0x58
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0310 	add.w	r3, r7, #16
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008b2:	4b20      	ldr	r3, [pc, #128]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008b4:	4a20      	ldr	r2, [pc, #128]	; (8000938 <MX_TIM1_Init+0xa4>)
 80008b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80008b8:	4b1e      	ldr	r3, [pc, #120]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008ba:	2247      	movs	r2, #71	; 0x47
 80008bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80008de:	4815      	ldr	r0, [pc, #84]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008e0:	f001 fb10 	bl	8001f04 <HAL_TIM_Base_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80008ea:	f000 f8c9 	bl	8000a80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <MX_TIM1_Init+0xa0>)
 80008fc:	f001 fbc2 	bl	8002084 <HAL_TIM_ConfigClockSource>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000906:	f000 f8bb 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4619      	mov	r1, r3
 800091a:	4806      	ldr	r0, [pc, #24]	; (8000934 <MX_TIM1_Init+0xa0>)
 800091c:	f001 fdb0 	bl	8002480 <HAL_TIMEx_MasterConfigSynchronization>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000926:	f000 f8ab 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	3720      	adds	r7, #32
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000430 	.word	0x20000430
 8000938:	40012c00 	.word	0x40012c00

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	4b46      	ldr	r3, [pc, #280]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000956:	4a45      	ldr	r2, [pc, #276]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800096a:	4b40      	ldr	r3, [pc, #256]	; (8000a6c <MX_GPIO_Init+0x130>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a3f      	ldr	r2, [pc, #252]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b37      	ldr	r3, [pc, #220]	; (8000a6c <MX_GPIO_Init+0x130>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x130>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009a0:	f043 0308 	orr.w	r3, r3, #8
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0308 	and.w	r3, r3, #8
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b2e      	ldr	r3, [pc, #184]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a2d      	ldr	r2, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b2b      	ldr	r3, [pc, #172]	; (8000a6c <MX_GPIO_Init+0x130>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]
//  __HAL_RCC_GPIOH_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4828      	ldr	r0, [pc, #160]	; (8000a70 <MX_GPIO_Init+0x134>)
 80009d0:	f000 fc16 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2180      	movs	r1, #128	; 0x80
 80009d8:	4826      	ldr	r0, [pc, #152]	; (8000a74 <MX_GPIO_Init+0x138>)
 80009da:	f000 fc11 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4825      	ldr	r0, [pc, #148]	; (8000a78 <MX_GPIO_Init+0x13c>)
 80009e4:	f000 fc0c 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2104      	movs	r1, #4
 80009ec:	4823      	ldr	r0, [pc, #140]	; (8000a7c <MX_GPIO_Init+0x140>)
 80009ee:	f000 fc07 	bl	8001200 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009f2:	2308      	movs	r3, #8
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f6:	2301      	movs	r3, #1
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	4619      	mov	r1, r3
 8000a08:	4819      	ldr	r0, [pc, #100]	; (8000a70 <MX_GPIO_Init+0x134>)
 8000a0a:	f000 fa67 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a0e:	2380      	movs	r3, #128	; 0x80
 8000a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4813      	ldr	r0, [pc, #76]	; (8000a74 <MX_GPIO_Init+0x138>)
 8000a26:	f000 fa59 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a2a:	2308      	movs	r3, #8
 8000a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x13c>)
 8000a42:	f000 fa4b 	bl	8000edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a46:	2304      	movs	r3, #4
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4807      	ldr	r0, [pc, #28]	; (8000a7c <MX_GPIO_Init+0x140>)
 8000a5e:	f000 fa3d 	bl	8000edc <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	48002000 	.word	0x48002000
 8000a74:	48000400 	.word	0x48000400
 8000a78:	48000c00 	.word	0x48000c00
 8000a7c:	48000800 	.word	0x48000800

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a96:	4a0e      	ldr	r2, [pc, #56]	; (8000ad0 <HAL_MspInit+0x44>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x44>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x44>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40021000 	.word	0x40021000

08000ad4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a0a      	ldr	r2, [pc, #40]	; (8000b0c <HAL_TIM_Base_MspInit+0x38>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d10b      	bne.n	8000afe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ae6:	4b0a      	ldr	r3, [pc, #40]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a09      	ldr	r2, [pc, #36]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000aec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <HAL_TIM_Base_MspInit+0x3c>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000afe:	bf00      	nop
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	40021000 	.word	0x40021000

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b60:	f000 f892 	bl	8000c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <SystemInit+0x20>)
 8000b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b72:	4a05      	ldr	r2, [pc, #20]	; (8000b88 <SystemInit+0x20>)
 8000b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	e000ed00 	.word	0xe000ed00

08000b8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b90:	f7ff ffea 	bl	8000b68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b94:	480c      	ldr	r0, [pc, #48]	; (8000bc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <LoopForever+0xe>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b9c:	e002      	b.n	8000ba4 <LoopCopyDataInit>

08000b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba2:	3304      	adds	r3, #4

08000ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba8:	d3f9      	bcc.n	8000b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000baa:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bac:	4c0a      	ldr	r4, [pc, #40]	; (8000bd8 <LoopForever+0x16>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb0:	e001      	b.n	8000bb6 <LoopFillZerobss>

08000bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb4:	3204      	adds	r2, #4

08000bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb8:	d3fb      	bcc.n	8000bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bba:	f001 fce9 	bl	8002590 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bbe:	f7ff fdd1 	bl	8000764 <main>

08000bc2 <LoopForever>:

LoopForever:
    b LoopForever
 8000bc2:	e7fe      	b.n	8000bc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bd0:	080028fc 	.word	0x080028fc
  ldr r2, =_sbss
 8000bd4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bd8:	20000480 	.word	0x20000480

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>

08000bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000be4:	2300      	movs	r3, #0
 8000be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 f943 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f80e 	bl	8000c10 <HAL_InitTick>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d002      	beq.n	8000c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	e001      	b.n	8000c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c00:	f7ff ff44 	bl	8000a8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c04:	79fb      	ldrb	r3, [r7, #7]
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c1c:	4b17      	ldr	r3, [pc, #92]	; (8000c7c <HAL_InitTick+0x6c>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d023      	beq.n	8000c6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <HAL_InitTick+0x70>)
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_InitTick+0x6c>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	4619      	mov	r1, r3
 8000c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f941 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d10f      	bne.n	8000c66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2b0f      	cmp	r3, #15
 8000c4a:	d809      	bhi.n	8000c60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	6879      	ldr	r1, [r7, #4]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	f000 f919 	bl	8000e8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c58:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <HAL_InitTick+0x74>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e007      	b.n	8000c70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e004      	b.n	8000c70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	73fb      	strb	r3, [r7, #15]
 8000c6a:	e001      	b.n	8000c70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000000c 	.word	0x2000000c
 8000c80:	20000004 	.word	0x20000004
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <HAL_IncTick+0x20>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_IncTick+0x24>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_IncTick+0x24>)
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	2000000c 	.word	0x2000000c
 8000cac:	2000047c 	.word	0x2000047c

08000cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_GetTick+0x14>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	2000047c 	.word	0x2000047c

08000cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cd0:	f7ff ffee 	bl	8000cb0 <HAL_GetTick>
 8000cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce0:	d005      	beq.n	8000cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ce2:	4b0a      	ldr	r3, [pc, #40]	; (8000d0c <HAL_Delay+0x44>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cee:	bf00      	nop
 8000cf0:	f7ff ffde 	bl	8000cb0 <HAL_GetTick>
 8000cf4:	4602      	mov	r2, r0
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d8f7      	bhi.n	8000cf0 <HAL_Delay+0x28>
  {
  }
}
 8000d00:	bf00      	nop
 8000d02:	bf00      	nop
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	2000000c 	.word	0x2000000c

08000d10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0307 	and.w	r3, r3, #7
 8000d1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d42:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <__NVIC_SetPriorityGrouping+0x44>)
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	60d3      	str	r3, [r2, #12]
}
 8000d48:	bf00      	nop
 8000d4a:	3714      	adds	r7, #20
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <__NVIC_GetPriorityGrouping+0x18>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	0a1b      	lsrs	r3, r3, #8
 8000d62:	f003 0307 	and.w	r3, r3, #7
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	; (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	; 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	; 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	; (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	; (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff47 	bl	8000d10 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff5c 	bl	8000d58 <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffb0 	bl	8000e30 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eea:	e166      	b.n	80011ba <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef8:	4013      	ands	r3, r2
 8000efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 8158 	beq.w	80011b4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d005      	beq.n	8000f1c <HAL_GPIO_Init+0x40>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0303 	and.w	r3, r3, #3
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d130      	bne.n	8000f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	68da      	ldr	r2, [r3, #12]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f52:	2201      	movs	r2, #1
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	091b      	lsrs	r3, r3, #4
 8000f68:	f003 0201 	and.w	r2, r3, #1
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d017      	beq.n	8000fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d123      	bne.n	800100e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	08da      	lsrs	r2, r3, #3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3208      	adds	r2, #8
 8000fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	220f      	movs	r2, #15
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	f003 0307 	and.w	r3, r3, #7
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	08da      	lsrs	r2, r3, #3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3208      	adds	r2, #8
 8001008:	6939      	ldr	r1, [r7, #16]
 800100a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	fa02 f303 	lsl.w	r3, r2, r3
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f003 0203 	and.w	r2, r3, #3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4313      	orrs	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 80b2 	beq.w	80011b4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001050:	4b61      	ldr	r3, [pc, #388]	; (80011d8 <HAL_GPIO_Init+0x2fc>)
 8001052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001054:	4a60      	ldr	r2, [pc, #384]	; (80011d8 <HAL_GPIO_Init+0x2fc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6613      	str	r3, [r2, #96]	; 0x60
 800105c:	4b5e      	ldr	r3, [pc, #376]	; (80011d8 <HAL_GPIO_Init+0x2fc>)
 800105e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001068:	4a5c      	ldr	r2, [pc, #368]	; (80011dc <HAL_GPIO_Init+0x300>)
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001092:	d02b      	beq.n	80010ec <HAL_GPIO_Init+0x210>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a52      	ldr	r2, [pc, #328]	; (80011e0 <HAL_GPIO_Init+0x304>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d025      	beq.n	80010e8 <HAL_GPIO_Init+0x20c>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a51      	ldr	r2, [pc, #324]	; (80011e4 <HAL_GPIO_Init+0x308>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d01f      	beq.n	80010e4 <HAL_GPIO_Init+0x208>
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <HAL_GPIO_Init+0x30c>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d019      	beq.n	80010e0 <HAL_GPIO_Init+0x204>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4a4f      	ldr	r2, [pc, #316]	; (80011ec <HAL_GPIO_Init+0x310>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d013      	beq.n	80010dc <HAL_GPIO_Init+0x200>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a4e      	ldr	r2, [pc, #312]	; (80011f0 <HAL_GPIO_Init+0x314>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d00d      	beq.n	80010d8 <HAL_GPIO_Init+0x1fc>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4a4d      	ldr	r2, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x318>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d007      	beq.n	80010d4 <HAL_GPIO_Init+0x1f8>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a4c      	ldr	r2, [pc, #304]	; (80011f8 <HAL_GPIO_Init+0x31c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d101      	bne.n	80010d0 <HAL_GPIO_Init+0x1f4>
 80010cc:	2307      	movs	r3, #7
 80010ce:	e00e      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d0:	2308      	movs	r3, #8
 80010d2:	e00c      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d4:	2306      	movs	r3, #6
 80010d6:	e00a      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010d8:	2305      	movs	r3, #5
 80010da:	e008      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010dc:	2304      	movs	r3, #4
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e0:	2303      	movs	r3, #3
 80010e2:	e004      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e4:	2302      	movs	r3, #2
 80010e6:	e002      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010e8:	2301      	movs	r3, #1
 80010ea:	e000      	b.n	80010ee <HAL_GPIO_Init+0x212>
 80010ec:	2300      	movs	r3, #0
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	f002 0203 	and.w	r2, r2, #3
 80010f4:	0092      	lsls	r2, r2, #2
 80010f6:	4093      	lsls	r3, r2
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010fe:	4937      	ldr	r1, [pc, #220]	; (80011dc <HAL_GPIO_Init+0x300>)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	089b      	lsrs	r3, r3, #2
 8001104:	3302      	adds	r3, #2
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800110c:	4b3b      	ldr	r3, [pc, #236]	; (80011fc <HAL_GPIO_Init+0x320>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43db      	mvns	r3, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001124:	2b00      	cmp	r3, #0
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001130:	4a32      	ldr	r2, [pc, #200]	; (80011fc <HAL_GPIO_Init+0x320>)
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001136:	4b31      	ldr	r3, [pc, #196]	; (80011fc <HAL_GPIO_Init+0x320>)
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	43db      	mvns	r3, r3
 8001140:	693a      	ldr	r2, [r7, #16]
 8001142:	4013      	ands	r3, r2
 8001144:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d003      	beq.n	800115a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800115a:	4a28      	ldr	r2, [pc, #160]	; (80011fc <HAL_GPIO_Init+0x320>)
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001160:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_GPIO_Init+0x320>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	43db      	mvns	r3, r3
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d003      	beq.n	8001184 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	4313      	orrs	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_GPIO_Init+0x320>)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800118a:	4b1c      	ldr	r3, [pc, #112]	; (80011fc <HAL_GPIO_Init+0x320>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43db      	mvns	r3, r3
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	4013      	ands	r3, r2
 8001198:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d003      	beq.n	80011ae <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011ae:	4a13      	ldr	r2, [pc, #76]	; (80011fc <HAL_GPIO_Init+0x320>)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	3301      	adds	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f47f ae91 	bne.w	8000eec <HAL_GPIO_Init+0x10>
  }
}
 80011ca:	bf00      	nop
 80011cc:	bf00      	nop
 80011ce:	371c      	adds	r7, #28
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010000 	.word	0x40010000
 80011e0:	48000400 	.word	0x48000400
 80011e4:	48000800 	.word	0x48000800
 80011e8:	48000c00 	.word	0x48000c00
 80011ec:	48001000 	.word	0x48001000
 80011f0:	48001400 	.word	0x48001400
 80011f4:	48001800 	.word	0x48001800
 80011f8:	48001c00 	.word	0x48001c00
 80011fc:	40010400 	.word	0x40010400

08001200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]
 800120c:	4613      	mov	r3, r2
 800120e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001210:	787b      	ldrb	r3, [r7, #1]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800121c:	e002      	b.n	8001224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121e:	887a      	ldrh	r2, [r7, #2]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001234:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_PWREx_GetVoltageRange+0x18>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	40007000 	.word	0x40007000

0800124c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125a:	d130      	bne.n	80012be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800125c:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001268:	d038      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001272:	4a1e      	ldr	r2, [pc, #120]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001274:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001278:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2232      	movs	r2, #50	; 0x32
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4a1b      	ldr	r2, [pc, #108]	; (80012f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	0c9b      	lsrs	r3, r3, #18
 800128c:	3301      	adds	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001290:	e002      	b.n	8001298 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3b01      	subs	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a4:	d102      	bne.n	80012ac <HAL_PWREx_ControlVoltageScaling+0x60>
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f2      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	695b      	ldr	r3, [r3, #20]
 80012b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b8:	d110      	bne.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e00f      	b.n	80012de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ca:	d007      	beq.n	80012dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012d4:	4a05      	ldr	r2, [pc, #20]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000
 80012f0:	20000004 	.word	0x20000004
 80012f4:	431bde83 	.word	0x431bde83

080012f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b088      	sub	sp, #32
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	f000 bc08 	b.w	8001b1c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130c:	4b96      	ldr	r3, [pc, #600]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800130e:	689b      	ldr	r3, [r3, #8]
 8001310:	f003 030c 	and.w	r3, r3, #12
 8001314:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001316:	4b94      	ldr	r3, [pc, #592]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001318:	68db      	ldr	r3, [r3, #12]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0310 	and.w	r3, r3, #16
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80e4 	beq.w	80014f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d007      	beq.n	8001344 <HAL_RCC_OscConfig+0x4c>
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	2b0c      	cmp	r3, #12
 8001338:	f040 808b 	bne.w	8001452 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b01      	cmp	r3, #1
 8001340:	f040 8087 	bne.w	8001452 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001344:	4b88      	ldr	r3, [pc, #544]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d005      	beq.n	800135c <HAL_RCC_OscConfig+0x64>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	699b      	ldr	r3, [r3, #24]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e3df      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a1a      	ldr	r2, [r3, #32]
 8001360:	4b81      	ldr	r3, [pc, #516]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0308 	and.w	r3, r3, #8
 8001368:	2b00      	cmp	r3, #0
 800136a:	d004      	beq.n	8001376 <HAL_RCC_OscConfig+0x7e>
 800136c:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001374:	e005      	b.n	8001382 <HAL_RCC_OscConfig+0x8a>
 8001376:	4b7c      	ldr	r3, [pc, #496]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001378:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800137c:	091b      	lsrs	r3, r3, #4
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	4293      	cmp	r3, r2
 8001384:	d223      	bcs.n	80013ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fd5a 	bl	8001e44 <RCC_SetFlashLatencyFromMSIRange>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e3c0      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800139a:	4b73      	ldr	r3, [pc, #460]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a72      	ldr	r2, [pc, #456]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	4b70      	ldr	r3, [pc, #448]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	496d      	ldr	r1, [pc, #436]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013b4:	4313      	orrs	r3, r2
 80013b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013b8:	4b6b      	ldr	r3, [pc, #428]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	69db      	ldr	r3, [r3, #28]
 80013c4:	021b      	lsls	r3, r3, #8
 80013c6:	4968      	ldr	r1, [pc, #416]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e025      	b.n	800141a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ce:	4b66      	ldr	r3, [pc, #408]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a65      	ldr	r2, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013d4:	f043 0308 	orr.w	r3, r3, #8
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a1b      	ldr	r3, [r3, #32]
 80013e6:	4960      	ldr	r1, [pc, #384]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013e8:	4313      	orrs	r3, r2
 80013ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ec:	4b5e      	ldr	r3, [pc, #376]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
 80013f8:	021b      	lsls	r3, r3, #8
 80013fa:	495b      	ldr	r1, [pc, #364]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a1b      	ldr	r3, [r3, #32]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 fd1a 	bl	8001e44 <RCC_SetFlashLatencyFromMSIRange>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e380      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800141a:	f000 fc87 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 800141e:	4602      	mov	r2, r0
 8001420:	4b51      	ldr	r3, [pc, #324]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	091b      	lsrs	r3, r3, #4
 8001426:	f003 030f 	and.w	r3, r3, #15
 800142a:	4950      	ldr	r1, [pc, #320]	; (800156c <HAL_RCC_OscConfig+0x274>)
 800142c:	5ccb      	ldrb	r3, [r1, r3]
 800142e:	f003 031f 	and.w	r3, r3, #31
 8001432:	fa22 f303 	lsr.w	r3, r2, r3
 8001436:	4a4e      	ldr	r2, [pc, #312]	; (8001570 <HAL_RCC_OscConfig+0x278>)
 8001438:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800143a:	4b4e      	ldr	r3, [pc, #312]	; (8001574 <HAL_RCC_OscConfig+0x27c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fbe6 	bl	8000c10 <HAL_InitTick>
 8001444:	4603      	mov	r3, r0
 8001446:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d052      	beq.n	80014f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	e364      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d032      	beq.n	80014c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800145a:	4b43      	ldr	r3, [pc, #268]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a42      	ldr	r2, [pc, #264]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001466:	f7ff fc23 	bl	8000cb0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800146e:	f7ff fc1f 	bl	8000cb0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e34d      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0f0      	beq.n	800146e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a35      	ldr	r2, [pc, #212]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001492:	f043 0308 	orr.w	r3, r3, #8
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a1b      	ldr	r3, [r3, #32]
 80014a4:	4930      	ldr	r1, [pc, #192]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014aa:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	69db      	ldr	r3, [r3, #28]
 80014b6:	021b      	lsls	r3, r3, #8
 80014b8:	492b      	ldr	r1, [pc, #172]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e01a      	b.n	80014f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014c6:	f023 0301 	bic.w	r3, r3, #1
 80014ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fbf0 	bl	8000cb0 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014d4:	f7ff fbec 	bl	8000cb0 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e31a      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0302 	and.w	r3, r3, #2
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x1dc>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d073      	beq.n	80015ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	2b08      	cmp	r3, #8
 8001506:	d005      	beq.n	8001514 <HAL_RCC_OscConfig+0x21c>
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	2b0c      	cmp	r3, #12
 800150c:	d10e      	bne.n	800152c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800150e:	697b      	ldr	r3, [r7, #20]
 8001510:	2b03      	cmp	r3, #3
 8001512:	d10b      	bne.n	800152c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d063      	beq.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d15f      	bne.n	80015e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	e2f7      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d106      	bne.n	8001544 <HAL_RCC_OscConfig+0x24c>
 8001536:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800153c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001540:	6013      	str	r3, [r2, #0]
 8001542:	e025      	b.n	8001590 <HAL_RCC_OscConfig+0x298>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800154c:	d114      	bne.n	8001578 <HAL_RCC_OscConfig+0x280>
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a05      	ldr	r2, [pc, #20]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	4b03      	ldr	r3, [pc, #12]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a02      	ldr	r2, [pc, #8]	; (8001568 <HAL_RCC_OscConfig+0x270>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e013      	b.n	8001590 <HAL_RCC_OscConfig+0x298>
 8001568:	40021000 	.word	0x40021000
 800156c:	080028b4 	.word	0x080028b4
 8001570:	20000004 	.word	0x20000004
 8001574:	20000008 	.word	0x20000008
 8001578:	4ba0      	ldr	r3, [pc, #640]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a9f      	ldr	r2, [pc, #636]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800157e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	4b9d      	ldr	r3, [pc, #628]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a9c      	ldr	r2, [pc, #624]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800158a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800158e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d013      	beq.n	80015c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001598:	f7ff fb8a 	bl	8000cb0 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015a0:	f7ff fb86 	bl	8000cb0 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b64      	cmp	r3, #100	; 0x64
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e2b4      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015b2:	4b92      	ldr	r3, [pc, #584]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0f0      	beq.n	80015a0 <HAL_RCC_OscConfig+0x2a8>
 80015be:	e014      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c0:	f7ff fb76 	bl	8000cb0 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c8:	f7ff fb72 	bl	8000cb0 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b64      	cmp	r3, #100	; 0x64
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e2a0      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015da:	4b88      	ldr	r3, [pc, #544]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x2d0>
 80015e6:	e000      	b.n	80015ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d060      	beq.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_OscConfig+0x310>
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b0c      	cmp	r3, #12
 8001600:	d119      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	2b02      	cmp	r3, #2
 8001606:	d116      	bne.n	8001636 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001608:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_OscConfig+0x328>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e27d      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001620:	4b76      	ldr	r3, [pc, #472]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	061b      	lsls	r3, r3, #24
 800162e:	4973      	ldr	r1, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001634:	e040      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d023      	beq.n	8001686 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800163e:	4b6f      	ldr	r3, [pc, #444]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6e      	ldr	r2, [pc, #440]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001644:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001648:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800164a:	f7ff fb31 	bl	8000cb0 <HAL_GetTick>
 800164e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001650:	e008      	b.n	8001664 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001652:	f7ff fb2d 	bl	8000cb0 <HAL_GetTick>
 8001656:	4602      	mov	r2, r0
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e25b      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001664:	4b65      	ldr	r3, [pc, #404]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0f0      	beq.n	8001652 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b62      	ldr	r3, [pc, #392]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	495f      	ldr	r1, [pc, #380]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
 8001684:	e018      	b.n	80016b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001686:	4b5d      	ldr	r3, [pc, #372]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a5c      	ldr	r2, [pc, #368]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800168c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001690:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb0d 	bl	8000cb0 <HAL_GetTick>
 8001696:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169a:	f7ff fb09 	bl	8000cb0 <HAL_GetTick>
 800169e:	4602      	mov	r2, r0
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e237      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1f0      	bne.n	800169a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d03c      	beq.n	800173e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d01c      	beq.n	8001706 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016cc:	4b4b      	ldr	r3, [pc, #300]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	4a4a      	ldr	r2, [pc, #296]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80016d4:	f043 0301 	orr.w	r3, r3, #1
 80016d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016dc:	f7ff fae8 	bl	8000cb0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016e4:	f7ff fae4 	bl	8000cb0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e212      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f6:	4b41      	ldr	r3, [pc, #260]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80016f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ef      	beq.n	80016e4 <HAL_RCC_OscConfig+0x3ec>
 8001704:	e01b      	b.n	800173e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001706:	4b3d      	ldr	r3, [pc, #244]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001708:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800170c:	4a3b      	ldr	r2, [pc, #236]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800170e:	f023 0301 	bic.w	r3, r3, #1
 8001712:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff facb 	bl	8000cb0 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800171e:	f7ff fac7 	bl	8000cb0 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e1f5      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001730:	4b32      	ldr	r3, [pc, #200]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ef      	bne.n	800171e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80a6 	beq.w	8001898 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001750:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10d      	bne.n	8001778 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	4b27      	ldr	r3, [pc, #156]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800175e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 8001762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001766:	6593      	str	r3, [r2, #88]	; 0x58
 8001768:	4b24      	ldr	r3, [pc, #144]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	60bb      	str	r3, [r7, #8]
 8001772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001774:	2301      	movs	r3, #1
 8001776:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <HAL_RCC_OscConfig+0x508>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d118      	bne.n	80017b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <HAL_RCC_OscConfig+0x508>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1d      	ldr	r2, [pc, #116]	; (8001800 <HAL_RCC_OscConfig+0x508>)
 800178a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001790:	f7ff fa8e 	bl	8000cb0 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001798:	f7ff fa8a 	bl	8000cb0 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e1b8      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_RCC_OscConfig+0x508>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d108      	bne.n	80017d0 <HAL_RCC_OscConfig+0x4d8>
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017c4:	4a0d      	ldr	r2, [pc, #52]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017c6:	f043 0301 	orr.w	r3, r3, #1
 80017ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017ce:	e029      	b.n	8001824 <HAL_RCC_OscConfig+0x52c>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	2b05      	cmp	r3, #5
 80017d6:	d115      	bne.n	8001804 <HAL_RCC_OscConfig+0x50c>
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ee:	4a03      	ldr	r2, [pc, #12]	; (80017fc <HAL_RCC_OscConfig+0x504>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x52c>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	40007000 	.word	0x40007000
 8001804:	4b9d      	ldr	r3, [pc, #628]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800180a:	4a9c      	ldr	r2, [pc, #624]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001814:	4b99      	ldr	r3, [pc, #612]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	4a98      	ldr	r2, [pc, #608]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 800181c:	f023 0304 	bic.w	r3, r3, #4
 8001820:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d016      	beq.n	800185a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fa40 	bl	8000cb0 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fa3c 	bl	8000cb0 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e168      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800184a:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 800184c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0ed      	beq.n	8001834 <HAL_RCC_OscConfig+0x53c>
 8001858:	e015      	b.n	8001886 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800185a:	f7ff fa29 	bl	8000cb0 <HAL_GetTick>
 800185e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001862:	f7ff fa25 	bl	8000cb0 <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e151      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001878:	4b80      	ldr	r3, [pc, #512]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 800187a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ed      	bne.n	8001862 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001886:	7ffb      	ldrb	r3, [r7, #31]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d105      	bne.n	8001898 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800188c:	4b7b      	ldr	r3, [pc, #492]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 800188e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001890:	4a7a      	ldr	r2, [pc, #488]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001892:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001896:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d03c      	beq.n	800191e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d01c      	beq.n	80018e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018ac:	4b73      	ldr	r3, [pc, #460]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	4a72      	ldr	r2, [pc, #456]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f9f8 	bl	8000cb0 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018c4:	f7ff f9f4 	bl	8000cb0 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e122      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80018d6:	4b69      	ldr	r3, [pc, #420]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80018d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0ef      	beq.n	80018c4 <HAL_RCC_OscConfig+0x5cc>
 80018e4:	e01b      	b.n	800191e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018e6:	4b65      	ldr	r3, [pc, #404]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80018e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ec:	4a63      	ldr	r2, [pc, #396]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f6:	f7ff f9db 	bl	8000cb0 <HAL_GetTick>
 80018fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018fe:	f7ff f9d7 	bl	8000cb0 <HAL_GetTick>
 8001902:	4602      	mov	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e105      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001910:	4b5a      	ldr	r3, [pc, #360]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001912:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ef      	bne.n	80018fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 80f9 	beq.w	8001b1a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	2b02      	cmp	r3, #2
 800192e:	f040 80cf 	bne.w	8001ad0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001932:	4b52      	ldr	r3, [pc, #328]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	f003 0203 	and.w	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001942:	429a      	cmp	r2, r3
 8001944:	d12c      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	3b01      	subs	r3, #1
 8001952:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001954:	429a      	cmp	r2, r3
 8001956:	d123      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001964:	429a      	cmp	r2, r3
 8001966:	d11b      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001972:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d113      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001982:	085b      	lsrs	r3, r3, #1
 8001984:	3b01      	subs	r3, #1
 8001986:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d109      	bne.n	80019a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	085b      	lsrs	r3, r3, #1
 8001998:	3b01      	subs	r3, #1
 800199a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800199c:	429a      	cmp	r2, r3
 800199e:	d071      	beq.n	8001a84 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d068      	beq.n	8001a78 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019a6:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d105      	bne.n	80019be <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80019b2:	4b32      	ldr	r3, [pc, #200]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e0ac      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80019c2:	4b2e      	ldr	r3, [pc, #184]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2d      	ldr	r2, [pc, #180]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019cc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019ce:	f7ff f96f 	bl	8000cb0 <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff f96b 	bl	8000cb0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e099      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80019e8:	4b24      	ldr	r3, [pc, #144]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f0      	bne.n	80019d6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019f4:	4b21      	ldr	r3, [pc, #132]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 80019f6:	68da      	ldr	r2, [r3, #12]
 80019f8:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_RCC_OscConfig+0x788>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a04:	3a01      	subs	r2, #1
 8001a06:	0112      	lsls	r2, r2, #4
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a0e:	0212      	lsls	r2, r2, #8
 8001a10:	4311      	orrs	r1, r2
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a16:	0852      	lsrs	r2, r2, #1
 8001a18:	3a01      	subs	r2, #1
 8001a1a:	0552      	lsls	r2, r2, #21
 8001a1c:	4311      	orrs	r1, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a22:	0852      	lsrs	r2, r2, #1
 8001a24:	3a01      	subs	r2, #1
 8001a26:	0652      	lsls	r2, r2, #25
 8001a28:	4311      	orrs	r1, r2
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a2e:	06d2      	lsls	r2, r2, #27
 8001a30:	430a      	orrs	r2, r1
 8001a32:	4912      	ldr	r1, [pc, #72]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0f      	ldr	r2, [pc, #60]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a44:	4b0d      	ldr	r3, [pc, #52]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	4a0c      	ldr	r2, [pc, #48]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a50:	f7ff f92e 	bl	8000cb0 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f92a 	bl	8000cb0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e058      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a6a:	4b04      	ldr	r3, [pc, #16]	; (8001a7c <HAL_RCC_OscConfig+0x784>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a76:	e050      	b.n	8001b1a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e04f      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a84:	4b27      	ldr	r3, [pc, #156]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d144      	bne.n	8001b1a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a90:	4b24      	ldr	r3, [pc, #144]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	4a20      	ldr	r2, [pc, #128]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aa8:	f7ff f902 	bl	8000cb0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f8fe 	bl	8000cb0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e02c      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x7b8>
 8001ace:	e024      	b.n	8001b1a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d01f      	beq.n	8001b16 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a12      	ldr	r2, [pc, #72]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae2:	f7ff f8e5 	bl	8000cb0 <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ae8:	e008      	b.n	8001afc <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aea:	f7ff f8e1 	bl	8000cb0 <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e00f      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f0      	bne.n	8001aea <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4905      	ldr	r1, [pc, #20]	; (8001b24 <HAL_RCC_OscConfig+0x82c>)
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_OscConfig+0x830>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	60cb      	str	r3, [r1, #12]
 8001b14:	e001      	b.n	8001b1a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	feeefffc 	.word	0xfeeefffc

08001b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0e7      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b75      	ldr	r3, [pc, #468]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b72      	ldr	r3, [pc, #456]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4970      	ldr	r1, [pc, #448]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b6e      	ldr	r3, [pc, #440]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0cf      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d010      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4b66      	ldr	r3, [pc, #408]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d908      	bls.n	8001b9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b63      	ldr	r3, [pc, #396]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4960      	ldr	r1, [pc, #384]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d04c      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	4b5a      	ldr	r3, [pc, #360]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d121      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e0a6      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bca:	4b54      	ldr	r3, [pc, #336]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d115      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e09a      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d107      	bne.n	8001bf2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be2:	4b4e      	ldr	r3, [pc, #312]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e08e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bf2:	4b4a      	ldr	r3, [pc, #296]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e086      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c02:	4b46      	ldr	r3, [pc, #280]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f023 0203 	bic.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4943      	ldr	r1, [pc, #268]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	4313      	orrs	r3, r2
 8001c12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c14:	f7ff f84c 	bl	8000cb0 <HAL_GetTick>
 8001c18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	e00a      	b.n	8001c32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1c:	f7ff f848 	bl	8000cb0 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e06e      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c32:	4b3a      	ldr	r3, [pc, #232]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 020c 	and.w	r2, r3, #12
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d1eb      	bne.n	8001c1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d010      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	4b31      	ldr	r3, [pc, #196]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d208      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b2e      	ldr	r3, [pc, #184]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	492b      	ldr	r1, [pc, #172]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c72:	4b29      	ldr	r3, [pc, #164]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	683a      	ldr	r2, [r7, #0]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d210      	bcs.n	8001ca2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c80:	4b25      	ldr	r3, [pc, #148]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 0207 	bic.w	r2, r3, #7
 8001c88:	4923      	ldr	r1, [pc, #140]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c90:	4b21      	ldr	r3, [pc, #132]	; (8001d18 <HAL_RCC_ClockConfig+0x1ec>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d001      	beq.n	8001ca2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e036      	b.n	8001d10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0304 	and.w	r3, r3, #4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d008      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4918      	ldr	r1, [pc, #96]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d009      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	4910      	ldr	r1, [pc, #64]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ce0:	f000 f824 	bl	8001d2c <HAL_RCC_GetSysClockFreq>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <HAL_RCC_ClockConfig+0x1f0>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 030f 	and.w	r3, r3, #15
 8001cf0:	490b      	ldr	r1, [pc, #44]	; (8001d20 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf2:	5ccb      	ldrb	r3, [r1, r3]
 8001cf4:	f003 031f 	and.w	r3, r3, #31
 8001cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cfc:	4a09      	ldr	r2, [pc, #36]	; (8001d24 <HAL_RCC_ClockConfig+0x1f8>)
 8001cfe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_RCC_ClockConfig+0x1fc>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe ff83 	bl	8000c10 <HAL_InitTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d0e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40022000 	.word	0x40022000
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	080028b4 	.word	0x080028b4
 8001d24:	20000004 	.word	0x20000004
 8001d28:	20000008 	.word	0x20000008

08001d2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	2300      	movs	r3, #0
 8001d38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d3a:	4b3e      	ldr	r3, [pc, #248]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d44:	4b3b      	ldr	r3, [pc, #236]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_GetSysClockFreq+0x34>
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	2b0c      	cmp	r3, #12
 8001d58:	d121      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d11e      	bne.n	8001d9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d60:	4b34      	ldr	r3, [pc, #208]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d6c:	4b31      	ldr	r3, [pc, #196]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d72:	0a1b      	lsrs	r3, r3, #8
 8001d74:	f003 030f 	and.w	r3, r3, #15
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	e005      	b.n	8001d88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d7c:	4b2d      	ldr	r3, [pc, #180]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 030f 	and.w	r3, r3, #15
 8001d86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d88:	4a2b      	ldr	r2, [pc, #172]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10d      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d9c:	e00a      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d102      	bne.n	8001daa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	e004      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d101      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001db2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	2b0c      	cmp	r3, #12
 8001db8:	d134      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dba:	4b1e      	ldr	r3, [pc, #120]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d003      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xac>
 8001dd0:	e005      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x110>)
 8001dd4:	617b      	str	r3, [r7, #20]
      break;
 8001dd6:	e005      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x114>)
 8001dda:	617b      	str	r3, [r7, #20]
      break;
 8001ddc:	e002      	b.n	8001de4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	617b      	str	r3, [r7, #20]
      break;
 8001de2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001de4:	4b13      	ldr	r3, [pc, #76]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	3301      	adds	r3, #1
 8001df0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001df2:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	fb03 f202 	mul.w	r2, r3, r2
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	0e5b      	lsrs	r3, r3, #25
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	3301      	adds	r3, #1
 8001e16:	005b      	lsls	r3, r3, #1
 8001e18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e1a:	697a      	ldr	r2, [r7, #20]
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e24:	69bb      	ldr	r3, [r7, #24]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3724      	adds	r7, #36	; 0x24
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000
 8001e38:	080028c4 	.word	0x080028c4
 8001e3c:	00f42400 	.word	0x00f42400
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e50:	4b2a      	ldr	r3, [pc, #168]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e5c:	f7ff f9e8 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001e60:	6178      	str	r0, [r7, #20]
 8001e62:	e014      	b.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b22      	ldr	r3, [pc, #136]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e7c:	f7ff f9d8 	bl	8001230 <HAL_PWREx_GetVoltageRange>
 8001e80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e82:	4b1e      	ldr	r3, [pc, #120]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e86:	4a1d      	ldr	r2, [pc, #116]	; (8001efc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	d10b      	bne.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d919      	bls.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2ba0      	cmp	r3, #160	; 0xa0
 8001ea0:	d902      	bls.n	8001ea8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	e013      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e010      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d902      	bls.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e00a      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b80      	cmp	r3, #128	; 0x80
 8001ebe:	d102      	bne.n	8001ec6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	613b      	str	r3, [r7, #16]
 8001ec4:	e004      	b.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b70      	cmp	r3, #112	; 0x70
 8001eca:	d101      	bne.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ecc:	2301      	movs	r3, #1
 8001ece:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ed0:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f023 0207 	bic.w	r2, r3, #7
 8001ed8:	4909      	ldr	r1, [pc, #36]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ee0:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d001      	beq.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3718      	adds	r7, #24
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40022000 	.word	0x40022000

08001f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e049      	b.n	8001faa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe fdd2 	bl	8000ad4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2202      	movs	r2, #2
 8001f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	4619      	mov	r1, r3
 8001f42:	4610      	mov	r0, r2
 8001f44:	f000 f968 	bl	8002218 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d001      	beq.n	8001fcc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e047      	b.n	800205c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	; (8002068 <HAL_TIM_Base_Start+0xb4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d01d      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fe6:	d018      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_TIM_Base_Start+0xb8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d013      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a1e      	ldr	r2, [pc, #120]	; (8002070 <HAL_TIM_Base_Start+0xbc>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00e      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <HAL_TIM_Base_Start+0xc0>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d009      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <HAL_TIM_Base_Start+0xc4>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_TIM_Base_Start+0x66>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a19      	ldr	r2, [pc, #100]	; (800207c <HAL_TIM_Base_Start+0xc8>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d115      	bne.n	8002046 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_TIM_Base_Start+0xcc>)
 8002022:	4013      	ands	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b06      	cmp	r3, #6
 800202a:	d015      	beq.n	8002058 <HAL_TIM_Base_Start+0xa4>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002032:	d011      	beq.n	8002058 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f042 0201 	orr.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002044:	e008      	b.n	8002058 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f042 0201 	orr.w	r2, r2, #1
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	e000      	b.n	800205a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002058:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800205a:	2300      	movs	r3, #0
}
 800205c:	4618      	mov	r0, r3
 800205e:	3714      	adds	r7, #20
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	40012c00 	.word	0x40012c00
 800206c:	40000400 	.word	0x40000400
 8002070:	40000800 	.word	0x40000800
 8002074:	40000c00 	.word	0x40000c00
 8002078:	40013400 	.word	0x40013400
 800207c:	40014000 	.word	0x40014000
 8002080:	00010007 	.word	0x00010007

08002084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800208e:	2300      	movs	r3, #0
 8002090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_TIM_ConfigClockSource+0x1c>
 800209c:	2302      	movs	r3, #2
 800209e:	e0b6      	b.n	800220e <HAL_TIM_ConfigClockSource+0x18a>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80020c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68ba      	ldr	r2, [r7, #8]
 80020d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020dc:	d03e      	beq.n	800215c <HAL_TIM_ConfigClockSource+0xd8>
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	f200 8087 	bhi.w	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 80020e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ea:	f000 8086 	beq.w	80021fa <HAL_TIM_ConfigClockSource+0x176>
 80020ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020f2:	d87f      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 80020f4:	2b70      	cmp	r3, #112	; 0x70
 80020f6:	d01a      	beq.n	800212e <HAL_TIM_ConfigClockSource+0xaa>
 80020f8:	2b70      	cmp	r3, #112	; 0x70
 80020fa:	d87b      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 80020fc:	2b60      	cmp	r3, #96	; 0x60
 80020fe:	d050      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x11e>
 8002100:	2b60      	cmp	r3, #96	; 0x60
 8002102:	d877      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 8002104:	2b50      	cmp	r3, #80	; 0x50
 8002106:	d03c      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0xfe>
 8002108:	2b50      	cmp	r3, #80	; 0x50
 800210a:	d873      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 800210c:	2b40      	cmp	r3, #64	; 0x40
 800210e:	d058      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x13e>
 8002110:	2b40      	cmp	r3, #64	; 0x40
 8002112:	d86f      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 8002114:	2b30      	cmp	r3, #48	; 0x30
 8002116:	d064      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002118:	2b30      	cmp	r3, #48	; 0x30
 800211a:	d86b      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 800211c:	2b20      	cmp	r3, #32
 800211e:	d060      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002120:	2b20      	cmp	r3, #32
 8002122:	d867      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
 8002124:	2b00      	cmp	r3, #0
 8002126:	d05c      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15e>
 8002128:	2b10      	cmp	r3, #16
 800212a:	d05a      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x15e>
 800212c:	e062      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	6899      	ldr	r1, [r3, #8]
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f000 f97f 	bl	8002440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68ba      	ldr	r2, [r7, #8]
 8002158:	609a      	str	r2, [r3, #8]
      break;
 800215a:	e04f      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	f000 f968 	bl	8002440 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800217e:	609a      	str	r2, [r3, #8]
      break;
 8002180:	e03c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	461a      	mov	r2, r3
 8002190:	f000 f8dc 	bl	800234c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2150      	movs	r1, #80	; 0x50
 800219a:	4618      	mov	r0, r3
 800219c:	f000 f935 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021a0:	e02c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	461a      	mov	r2, r3
 80021b0:	f000 f8fb 	bl	80023aa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2160      	movs	r1, #96	; 0x60
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f925 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021c0:	e01c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	461a      	mov	r2, r3
 80021d0:	f000 f8bc 	bl	800234c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2140      	movs	r1, #64	; 0x40
 80021da:	4618      	mov	r0, r3
 80021dc:	f000 f915 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021e0:	e00c      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	4610      	mov	r0, r2
 80021ee:	f000 f90c 	bl	800240a <TIM_ITRx_SetConfig>
      break;
 80021f2:	e003      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
      break;
 80021f8:	e000      	b.n	80021fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 80021fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2201      	movs	r2, #1
 8002200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	4a40      	ldr	r2, [pc, #256]	; (800232c <TIM_Base_SetConfig+0x114>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d013      	beq.n	8002258 <TIM_Base_SetConfig+0x40>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d00f      	beq.n	8002258 <TIM_Base_SetConfig+0x40>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a3d      	ldr	r2, [pc, #244]	; (8002330 <TIM_Base_SetConfig+0x118>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d00b      	beq.n	8002258 <TIM_Base_SetConfig+0x40>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <TIM_Base_SetConfig+0x11c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d007      	beq.n	8002258 <TIM_Base_SetConfig+0x40>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a3b      	ldr	r2, [pc, #236]	; (8002338 <TIM_Base_SetConfig+0x120>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d003      	beq.n	8002258 <TIM_Base_SetConfig+0x40>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a3a      	ldr	r2, [pc, #232]	; (800233c <TIM_Base_SetConfig+0x124>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d108      	bne.n	800226a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800225e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	68fa      	ldr	r2, [r7, #12]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a2f      	ldr	r2, [pc, #188]	; (800232c <TIM_Base_SetConfig+0x114>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d01f      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002278:	d01b      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a2c      	ldr	r2, [pc, #176]	; (8002330 <TIM_Base_SetConfig+0x118>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d017      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a2b      	ldr	r2, [pc, #172]	; (8002334 <TIM_Base_SetConfig+0x11c>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d013      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a2a      	ldr	r2, [pc, #168]	; (8002338 <TIM_Base_SetConfig+0x120>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00f      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a29      	ldr	r2, [pc, #164]	; (800233c <TIM_Base_SetConfig+0x124>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d00b      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a28      	ldr	r2, [pc, #160]	; (8002340 <TIM_Base_SetConfig+0x128>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d007      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <TIM_Base_SetConfig+0x12c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <TIM_Base_SetConfig+0x9a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a26      	ldr	r2, [pc, #152]	; (8002348 <TIM_Base_SetConfig+0x130>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d108      	bne.n	80022c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	695b      	ldr	r3, [r3, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a10      	ldr	r2, [pc, #64]	; (800232c <TIM_Base_SetConfig+0x114>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d00f      	beq.n	8002310 <TIM_Base_SetConfig+0xf8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <TIM_Base_SetConfig+0x124>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d00b      	beq.n	8002310 <TIM_Base_SetConfig+0xf8>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a11      	ldr	r2, [pc, #68]	; (8002340 <TIM_Base_SetConfig+0x128>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d007      	beq.n	8002310 <TIM_Base_SetConfig+0xf8>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a10      	ldr	r2, [pc, #64]	; (8002344 <TIM_Base_SetConfig+0x12c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d003      	beq.n	8002310 <TIM_Base_SetConfig+0xf8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a0f      	ldr	r2, [pc, #60]	; (8002348 <TIM_Base_SetConfig+0x130>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d103      	bne.n	8002318 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691a      	ldr	r2, [r3, #16]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	615a      	str	r2, [r3, #20]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	40012c00 	.word	0x40012c00
 8002330:	40000400 	.word	0x40000400
 8002334:	40000800 	.word	0x40000800
 8002338:	40000c00 	.word	0x40000c00
 800233c:	40013400 	.word	0x40013400
 8002340:	40014000 	.word	0x40014000
 8002344:	40014400 	.word	0x40014400
 8002348:	40014800 	.word	0x40014800

0800234c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800234c:	b480      	push	{r7}
 800234e:	b087      	sub	sp, #28
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	f023 0201 	bic.w	r2, r3, #1
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f023 030a 	bic.w	r3, r3, #10
 8002388:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	697a      	ldr	r2, [r7, #20]
 800239c:	621a      	str	r2, [r3, #32]
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b087      	sub	sp, #28
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	60f8      	str	r0, [r7, #12]
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a1b      	ldr	r3, [r3, #32]
 80023ba:	f023 0210 	bic.w	r2, r3, #16
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80023d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	031b      	lsls	r3, r3, #12
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80023e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	011b      	lsls	r3, r3, #4
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	693a      	ldr	r2, [r7, #16]
 80023fc:	621a      	str	r2, [r3, #32]
}
 80023fe:	bf00      	nop
 8002400:	371c      	adds	r7, #28
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr

0800240a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800240a:	b480      	push	{r7}
 800240c:	b085      	sub	sp, #20
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
 8002412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	f043 0307 	orr.w	r3, r3, #7
 800242c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	609a      	str	r2, [r3, #8]
}
 8002434:	bf00      	nop
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
 800244c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800245a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	021a      	lsls	r2, r3, #8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	431a      	orrs	r2, r3
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	4313      	orrs	r3, r2
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	609a      	str	r2, [r3, #8]
}
 8002474:	bf00      	nop
 8002476:	371c      	adds	r7, #28
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002490:	2b01      	cmp	r3, #1
 8002492:	d101      	bne.n	8002498 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002494:	2302      	movs	r3, #2
 8002496:	e068      	b.n	800256a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2202      	movs	r2, #2
 80024a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d004      	beq.n	80024cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2d      	ldr	r2, [pc, #180]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d108      	bne.n	80024de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4313      	orrs	r3, r2
 80024dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68fa      	ldr	r2, [r7, #12]
 80024f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01d      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250a:	d018      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a13      	ldr	r2, [pc, #76]	; (800257c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a14      	ldr	r2, [pc, #80]	; (800258c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d10c      	bne.n	8002558 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002544:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	4313      	orrs	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3714      	adds	r7, #20
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	40012c00 	.word	0x40012c00
 800257c:	40013400 	.word	0x40013400
 8002580:	40000400 	.word	0x40000400
 8002584:	40000800 	.word	0x40000800
 8002588:	40000c00 	.word	0x40000c00
 800258c:	40014000 	.word	0x40014000

08002590 <__libc_init_array>:
 8002590:	b570      	push	{r4, r5, r6, lr}
 8002592:	4d0d      	ldr	r5, [pc, #52]	; (80025c8 <__libc_init_array+0x38>)
 8002594:	4c0d      	ldr	r4, [pc, #52]	; (80025cc <__libc_init_array+0x3c>)
 8002596:	1b64      	subs	r4, r4, r5
 8002598:	10a4      	asrs	r4, r4, #2
 800259a:	2600      	movs	r6, #0
 800259c:	42a6      	cmp	r6, r4
 800259e:	d109      	bne.n	80025b4 <__libc_init_array+0x24>
 80025a0:	4d0b      	ldr	r5, [pc, #44]	; (80025d0 <__libc_init_array+0x40>)
 80025a2:	4c0c      	ldr	r4, [pc, #48]	; (80025d4 <__libc_init_array+0x44>)
 80025a4:	f000 f820 	bl	80025e8 <_init>
 80025a8:	1b64      	subs	r4, r4, r5
 80025aa:	10a4      	asrs	r4, r4, #2
 80025ac:	2600      	movs	r6, #0
 80025ae:	42a6      	cmp	r6, r4
 80025b0:	d105      	bne.n	80025be <__libc_init_array+0x2e>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80025b8:	4798      	blx	r3
 80025ba:	3601      	adds	r6, #1
 80025bc:	e7ee      	b.n	800259c <__libc_init_array+0xc>
 80025be:	f855 3b04 	ldr.w	r3, [r5], #4
 80025c2:	4798      	blx	r3
 80025c4:	3601      	adds	r6, #1
 80025c6:	e7f2      	b.n	80025ae <__libc_init_array+0x1e>
 80025c8:	080028f4 	.word	0x080028f4
 80025cc:	080028f4 	.word	0x080028f4
 80025d0:	080028f4 	.word	0x080028f4
 80025d4:	080028f8 	.word	0x080028f8

080025d8 <memset>:
 80025d8:	4402      	add	r2, r0
 80025da:	4603      	mov	r3, r0
 80025dc:	4293      	cmp	r3, r2
 80025de:	d100      	bne.n	80025e2 <memset+0xa>
 80025e0:	4770      	bx	lr
 80025e2:	f803 1b01 	strb.w	r1, [r3], #1
 80025e6:	e7f9      	b.n	80025dc <memset+0x4>

080025e8 <_init>:
 80025e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ea:	bf00      	nop
 80025ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ee:	bc08      	pop	{r3}
 80025f0:	469e      	mov	lr, r3
 80025f2:	4770      	bx	lr

080025f4 <_fini>:
 80025f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f6:	bf00      	nop
 80025f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025fa:	bc08      	pop	{r3}
 80025fc:	469e      	mov	lr, r3
 80025fe:	4770      	bx	lr
